#  This file is part of First Step.
#
#  First Step is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software
#  Foundation, either version 3 of the License, or (at your option) any later version.
#
#  First Step is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with First Step.  If not, see <http://www.gnu.org/licenses/>
#
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014

import spring

func filereadInternal(camoFd data, bytes ptr uint8, len intptr, err ptr ptr spring:Error, eof ptr bool) uintptr
  mut fd = cast<int64>(camoFd)
  decl stream_readfileInternal func(fd int64, buf data, len intptr, error ptr uint8, errLen uintptr) intptr
  mut buf [512] uint8
  mut rd = stream_readfileInternal(fd, bytes, len, buf, 512)

  if rd < 0
    val err = spring:errorNew(buf)
    return 0
  /if

  if rd == 0
    val eof = true
  /if

  return rd
/func

func filewriteInternal(camoFd data, bytes ptr uint8, len intptr, err ptr ptr spring:Error) uintptr
  mut fd = cast<int64>(camoFd)
  decl stream_writefileInternal func(fd int64, buf data, len intptr, error ptr uint8, errLen uintptr) intptr
  mut buf [512] uint8
  mut wt intptr
  mut wttot intptr = 0

  while wttot < len
    wt = stream_writefileInternal(fd, bytes + wttot, len - wttot, buf, 512)

    if wt < 0
      val err = spring:errorNew(buf)
      return 0
    /if

    wttot = wttot + wt
  /while

  return wttot
/func

func filecloseInternal(camoFd data, err ptr ptr spring:Error) bool
  decl stream_closefileInternal func(fd int64, error ptr uint8, errLen uintptr) uint8
  mut buf [512] uint8

  if stream_closefileInternal(cast<int64>(camoFd), buf, 512) != 0
    return true
  /if

  return false
/func

func fileOpen(filename ptr uint8, err ptr ptr spring:Error) ptr spring:Stream
  decl open_readfile func(name ptr uint8, error ptr uint8, errlen uintptr) int64
  mut buf [512] uint8

  val err = null

  mut fd = open_readfile(filename, buf, 512)
  if fd < 0
    val err = spring:errorNew(buf)
    return null
  /if

  return spring:streamNew(cast<data>(fd), ptr filereadInternal, null, ptr filecloseInternal)
/func

func fileCreate(filename ptr uint8, err ptr ptr spring:Error) ptr spring:Stream
  decl open_writefile func(name ptr uint8, error ptr uint8, errlen uintptr) int64
  mut buf [512] uint8

  mut fd = open_writefile(filename, buf, 512)
  if fd < 0
    val err = spring:errorNew(buf)
    return null
  /if

  return spring:streamNew(cast<data>(fd), null, ptr filewriteInternal, ptr filecloseInternal)
/func
