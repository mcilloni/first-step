#  This file is part of First Step.
#
#  First Step is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software
#  Foundation, either version 3 of the License, or (at your option) any later version.
#
#  First Step is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with First Step.  If not, see <http://www.gnu.org/licenses/>
#
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014

import spring

func csAppend(cs ptr spring:Charstash, ch uint8)
  if cs'len == cs'cap
    cs'cap = cs'cap + 10
    mut new = cast<ptr uint8>(spring:alloc(cs'cap))
    spring:memmove(new, cs'base, cs'len)
    spring:free(cs'base)
    cs'base = new
    cs'work = cs'base + cs'len
  /if

  val cs'work = ch
  cs'len++
  cs'work++
/func

func csAppendInt(cs ptr spring:Charstash, num uintptr)
  mut buf [20] int8

  spring:numtostr(num, ptr buf[0], 20)

  spring:csAppendStr(cs, buf)
/func

func csAppendStr(cs ptr spring:Charstash, str ptr uint8)
  while val str != 0
    csAppend(cs, val str)
    str++
  /while
/func

func csFree(cs ptr spring:Charstash)
  spring:free(cs'base)
  spring:free(cs)
/func

func csNew(cap uintptr) ptr spring:Charstash
  mut cs = cast<ptr spring:Charstash>(spring:zalloc(size(spring:Charstash)))

  cs'work = cs'base = cast<ptr uint8>(spring:alloc(cap))
  cs'cap = cap

  return cs
/func

func csUnleash(cs ptr spring:Charstash) ptr uint8
  csAppend(cs, 0)

  mut ret = cs'base
  spring:free(cs)

  return ret
/func

func csLen(cs ptr spring:Charstash) uintptr
  return cs'len
/func
