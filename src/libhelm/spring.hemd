#  This file is part of First Step.
#  
#  First Step is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software 
#  Foundation, either version 3 of the License, or (at your option) any later version. 
#
#  First Step is distributed in the hope that it will be useful, but 
#  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with First Step.  If not, see <http://www.gnu.org/licenses/>
#
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014

module spring

alias FILE data

# list structures
alias Lnode struct(
  prec, succ ptr Lnode,
  value uintptr
)

alias List struct(
  start, end ptr Lnode,
  len uintptr,

  current ptr Lnode,
  pos uintptr
)

# vector structures

alias Vector struct (
  arr ptr uintptr,
  cap,len uintptr,
  isSlice bool
)

# Memory functions
decl alloc func(uintptr) data
decl free func(data)
decl memcpy func(data, data, uintptr) data
decl memmove func(data, data, uintptr) data
decl memset func(data, uintptr, uintptr) data
decl zalloc func(uintptr) data

# IO functions
decl fputs func(ptr uint8, FILE)
decl printint func(uint64)
decl puts func(ptr uint8)

# libc std streams wrapper functions
decl stderr_file func() FILE
decl stdin_file func() FILE
decl stdout_file func() FILE

# string functions
decl strlen func(ptr uint8) uintptr
decl strequals func(ptr uint8, ptr uint8) bool
decl strncpy func(ptr uint8, ptr uint8, uintptr) ptr uint8
decl strclone func(ptr uint8) ptr uint8

# lists functions

decl listAdd ptr func(ptr List, uintptr, data) intptr
decl listAddint func(ptr List, uintptr, uintptr) intptr
decl listAppend ptr func(ptr List, data) intptr
decl listAppendint func(ptr List, uintptr) intptr
decl listExtract func(ptr List, uintptr, intptr) ptr List
decl listFree func(ptr List)
decl listFreeAll func(ptr List, ptr func(data))
decl listFreeContents func(ptr List, ptr func(data))
decl listGet ptr func(ptr List, uintptr) ptr data
decl listGetint func(ptr List, uintptr) ptr uintptr
decl listInsert ptr func(ptr List, uintptr, data) intptr
decl listInsertint func(ptr List, uintptr, uintptr) intptr
decl listLen func(ptr List) uintptr
decl listNew func() ptr List
decl listPop ptr func(data) data
decl listPopint func(ptr List) uintptr
decl listPrint func(ptr List)
decl listPrune func(ptr List)
decl listPush ptr func(ptr List, data)
decl listPushint func(ptr List, uintptr)
decl listShallowCopy func(ptr List) ptr List

# vector functions

decl vectAppend ptr func(ptr Vector, data) bool
decl vectAppendint func(ptr Vector, uintptr) bool
decl vectCap func(ptr Vector) uintptr
decl vectExtract func(ptr Vector, uintptr, intptr) ptr Vector
decl vectFree func(ptr Vector)
decl vectFreeAll func(ptr Vector, ptr func(data))
decl vectFreeContents func(ptr Vector, ptr func(data))
decl vectGet ptr func(ptr Vector, uintptr) ptr data
decl vectGetint func(ptr Vector, uintptr) ptr uintptr
decl vectLen func(ptr Vector) uintptr
decl vectNew func(uintptr) ptr Vector
decl vectNewcap func(ptr Vector, uintptr)
decl vectPrint func(ptr Vector)
decl vectPrune func(ptr Vector)
decl vectPut ptr func(ptr Vector, uintptr, data) bool
decl vectPutint func(ptr Vector, uintptr, uintptr) bool
decl vectSlice func(ptr Vector, uintptr, intptr) ptr Vector
