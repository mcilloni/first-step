#  This file is part of First Step.
#  
#  First Step is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software 
#  Foundation, either version 3 of the License, or (at your option) any later version. 
#
#  First Step is distributed in the hope that it will be useful, but 
#  WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with First Step.  If not, see <http://www.gnu.org/licenses/>
#
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014

import spring

var BLACK = false
var RED = true
var FREE_NONE uint8 = 0
var FREE_KEY uint8 = 1
var FREE_VALUE uint8 = 10

func node_new(key data, value data, cmp spring:comparer, freewhat uint8) ptr spring:Mnode
  var ret = cast<ptr spring:Mnode>(spring:zalloc(size(spring:Mnode)))
  ret'key = key
  ret'value = value
  ret'color = RED
  ret'cmp = cmp
  ret'freewhat = freewhat
  return ret
/func

func node_rotateLeft(node ptr spring:Mnode) ptr spring:Mnode
  var ret = node'right
  node'right = ret'left
  ret'left = node
  ret'color = ret'left'color
  ret'left'color = RED
  return ret
/func

func node_rotateRight(node ptr spring:Mnode) ptr spring:Mnode
  var ret = node'left
  node'left = ret'right
  ret'right = node
  ret'color = ret'right'color
  ret'right'color = RED
  return ret
/func

func node_colorFlip(node ptr spring:Mnode)
  node'color = !node'color
  node'left'color = !node'left'color
  node'right'color = !node'right'color
/func

func node_isRed(node ptr spring:Mnode) bool
  return (node != null) and (node'color == RED)
/func

func node_isBlack(node ptr spring:Mnode) bool
  return (node == null) or (node'color == BLACK)
/func

func node_free(node ptr spring:Mnode, freeKey ptr func(data), freeVal ptr func(data))

  if node == null
    return
  /if

  node_free(node'left, freeKey, freeVal)
  node_free(node'right, freeKey, freeVal)

  if (node'freewhat & FREE_KEY) != 0
    if node'key != null
      freeKey(node'key)
    /if
  /if

  if (node'freewhat & FREE_VALUE) != 0
    if node'value != null
      freeVal(node'value)
    /if
  /if

  spring:free(node)

/func

func node_fixUp(node ptr spring:Mnode) ptr spring:Mnode
  if node_isRed(node'right)
	  node = node_rotateLeft(node)
  /if

  if node_isRed(node'left) and node_isRed(node'left'left)
	  node = node_rotateRight(node)
	  node_colorFlip(node)
  /if

  return node
/func

func node_add(node ptr spring:Mnode, keyV data, value data, cmp spring:comparer, freewhat uint8, oldvalue ptr data) ptr spring:Mnode

  if node == null
    val oldvalue = null
    return node_new(keyV, value, cmp, freewhat)
  /if

  var res = node'cmp(keyV,node'key)
  if res == 1
    node'right = node_add(node'right, keyV, value, node'cmp, freewhat, oldvalue)
  else
    if res == -1
      node'left = node_add(node'left, keyV, value, node'cmp, freewhat, oldvalue)
	  else
      val oldvalue = node'value
	    node'value = value
	  /if
  /if

  return node_fixUp(node)

/func

func node_moveRedLeft(node ptr spring:Mnode) ptr spring:Mnode

  node_colorFlip(node)

  if (node_isRed(node'right'left))
    node'right = node_rotateRight(node'right)
	  node = node_rotateLeft(node)
	  node_colorFlip(node)
  /if

  return node

/func

func node_moveRedRight(node ptr spring:Mnode) ptr spring:Mnode

  node_colorFlip(node)

  if node_isRed(node'left'left)
    node = node_rotateRight(node)
	  node_colorFlip(node)
  /if

  return node

/func

func node_get(node ptr spring:Mnode, keyV data, valueV ptr data) bool
  if node == null
    return false
  /if

  var res = node'cmp(keyV, node'key)
  if res == 0
    val valueV = node'value
    return true
  else
    if res == -1
      return node_get(node'left, keyV, valueV)
    else
      return node_get(node'right, keyV, valueV)
    /if
  /if
/func

func node_deleteMin(node ptr spring:Mnode) ptr spring:Mnode
  if node'left == null
    return null
  /if

  if node_isBlack(node'left) and node_isBlack(node'left'left)
    node= node_moveRedLeft(node)
  /if

  node'left = node_deleteMin(node'left)
  return node_fixUp(node)
/func

func node_mkpair(node ptr spring:Mnode) ptr spring:Pair
  if node == null
    return null
  /if

  var ret = cast<ptr spring:Pair>(spring:alloc(size(spring:Pair)))
  ret'key = node'key
  ret'value = node'value
  return ret
/func

func node_minpair(node ptr spring:Mnode) ptr spring:Pair
  if node'left == null
    return node_mkpair(node)
  else
    return node_minpair(node'left)
  /if
/func

func node_min(node ptr spring:Mnode) data
  if node'left == null
    return node'key
  else
    return node_min(node'left)
  /if
/func

func node_delete(node ptr spring:Mnode, keyV data, found ptr bool) ptr spring:Mnode

  if node'cmp(keyV,node'key) != 0
    if node_isRed(node'left) and node_isRed(node'left'left)
      node = node_moveRedLeft(node)
    /if

    node'left = node_delete(node'left, keyV, found)
  else

    if node_isRed(node'left)
      node = node_rotateRight(node)
    /if

    if (node'cmp(keyV, node'key) == 0) and (node'right == null)
      val found = true
      return null
    /if

    if node_isBlack(node'right) and node_isBlack(node'right'left)
      node = node_moveRedRight(node)
    /if

    if node'cmp(keyV, node'key) == 0
      node_get(node'right, node_min(node'right), ptr node'value)
      node'key = node_min(node'right)
      node'right = node_deleteMin(node'right)
      val found = true
    else
      node'right = node_delete(node'right, keyV, found)
    /if

  /if

  return node_fixUp(node)

/func

func mapNew(cmp spring:comparer) ptr spring:Map
  var map = cast<ptr spring:Map>(spring:zalloc(size(spring:Map)))
  map'cmp = cmp
  return map
/func

func mapGet(map ptr spring:Map, key data, value ptr data) bool
  if map'root == null
    return false
  /if

  return node_get(map'root,key, value)
/func

func mapPut(map ptr spring:Map, key data, value data, freewhat uint8) data
  var oldvalue data
  map'root = node_add(map'root, key, value, map'cmp, freewhat, ptr oldvalue)
  map'root'color = BLACK

  if oldvalue == null
    map'len++
  /if

  return oldvalue
/func

func mapContains(map ptr spring:Map, key data) bool
  var value data #ignored - will be discarded but needed for mapGet to work
  return mapGet(map, key, ptr value)
/func

func mapRemove(map ptr spring:Map, key data) bool
	var ret = false
	map'root = node_delete(map'root, key, ptr ret)
	map'root'color = BLACK

	if ret
	  map'len--
  /if

	return ret
/func

func mapFreeSpec(map ptr spring:Map, freeKey ptr func(data), freeVal ptr func(data))
  if map == null
    return
  /if

  if freeKey == null
    freeKey = ptr spring:free
  /if

  if freeVal == null
    freeVal = ptr spring:free
  /if

  node_free(map'root, freeKey, freeVal)
  spring:free(map)
/func

func mapFree(map ptr spring:Map)
  mapFreeSpec(map, null, null)
/func

func mapLen(map ptr spring:Map) uintptr
  return map'len
/func

func strcomparer(s1 data, s2 data) int8
  decl strcmp func(data, data) int8
  var comp = strcmp(s1, s2)

  if comp > 0
    return 1
  else
    if comp < 0
      return -1
    else
      return 0
    /if
  /if
/func

func strmapNew() ptr spring:Map
  return mapNew(ptr strcomparer)
/func

