program = { definition }

definition = entry

entry = 'entry', stmtEnd, body, '/entry'

body = {stmt}

stmt = (if | declaration | expr), stmtEnd

if = 'if', expr, stmtEnd, body, '/if'
declaration = 'var', (mulVarDecl | singleVarDecl)
stmtEnd = newLine | ';'

mulVarDecl = varDecl,{(',', varDecl)}, type
singleVarDecl = assign | (id, type)

varDecl = id | assign

assign = id, '=', expr

id = letter, {(letter | cipher)}

expr = ('(', exprC, ')') | exprC

exprC =  dec | inc | id | (expr, binOp, expr) | (unOp,expr) | assign | const

const = number

number = decNumber | binNumber | hexNumber

binOp = '+' | '-' | '*' | '/' | 'and' | 'or' | '==' | '!='
unOp = '-' | '!' 
inc = id, '++'
dec = id, '--'

decNumber = ? decimal number ?
hexNumber = ? hexadecimal number like 456h, letters A-F can be both cases, h should be lowcase ?
binNumber = ? binary number like 10101b, b should be lowcase ?

letter = ? any Unicode letter ?
cipher = ? any cipher ?
newLine = ? new line delimiter ?

